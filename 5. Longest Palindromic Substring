class Solution {
public:
    string longestPalindrome(string s) {
        
        //Using Manacher's algorithm:
        
        string processed = "#";
        for (char c : s) 
        {
            processed += c;
            processed += '#';
        }

        int n = processed.length();
        vector<int> p_lengths(n, 0);

        int center = 0, right = 0;

        for (int i = 0; i < n; i++) 
        {
            int mirror = 2 * center - i;
            if (i < right) 
            {
                p_lengths[i] = min(right - i, p_lengths[mirror]);
            }

            int left = i - (p_lengths[i] + 1);
            int right = i + (p_lengths[i] + 1);

            while (left >= 0 && right < n && processed[left] == processed[right]) {
                p_lengths[i]++;
                left--;
                right++;
            }

            if (i + p_lengths[i] > right) 
            {
                center = i;
                right = i + p_lengths[i];
            }
        }

        int max_length = 0; 
        center = 0;

        for (int i = 0; i < n; i++) 
        {
            if (p_lengths[i] > max_length) 
            {
                max_length = p_lengths[i];
                center = i;
            }
        }

        int start = (center - max_length) / 2;
        return s.substr(start, max_length);
    }
};
